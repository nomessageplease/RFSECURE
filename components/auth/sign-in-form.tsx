"use client"

import type React from "react"
import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { createClient } from "@/lib/supabase/client"
import { Mail, Lock, AlertCircle, Loader2 } from "lucide-react"

export function SignInForm() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [debugInfo, setDebugInfo] = useState<any>(null)

  const router = useRouter()
  const supabase = createClient()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞...")
    setLoading(true)
    setError(null)
    setSuccess(null)
    setDebugInfo(null)

    try {
      console.log("üìß –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å email:", email)

      // –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      console.log("üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", {
        user: authData?.user?.email,
        session: !!authData?.session,
        error: authError,
      })

      if (authError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", authError)
        setError(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${authError.message}`)
        setDebugInfo({ step: "auth", error: authError })
        return
      }

      if (!authData?.user) {
        console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        setDebugInfo({ step: "auth", error: "No user data" })
        return
      }

      console.log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")

      // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const { data: profile, error: profileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", authData.user.id)
        .single()

      console.log("üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", { profile, error: profileError })

      if (profileError) {
        if (profileError.code === "PGRST116") {
          console.warn("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")

          // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
          const { data: newProfile, error: createError } = await supabase
            .from("profiles")
            .insert({
              id: authData.user.id,
              email: authData.user.email || "",
              full_name: authData.user.user_metadata?.full_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
              role: "user",
              is_verified: false,
            })
            .select()
            .single()

          if (createError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", createError)
            setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${createError.message}`)
            setDebugInfo({ step: "profile_create", error: createError })
            return
          }

          console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:", newProfile)
          setDebugInfo({ step: "profile_created", profile: newProfile })
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", profileError)
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${profileError.message}`)
          setDebugInfo({ step: "profile_fetch", error: profileError })
          return
        }
      } else {
        console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:", profile)
        setDebugInfo({ step: "profile_loaded", profile })
      }

      // –®–∞–≥ 3: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      setSuccess("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...")
      console.log("üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      setTimeout(() => {
        router.push("/")
        router.refresh()
      }, 1500)
    } catch (err) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err)
      setError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`)
      setDebugInfo({ step: "critical_error", error: err })
    } finally {
      setLoading(false)
    }
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold">–í—Ö–æ–¥</CardTitle>
        <CardDescription>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                id="email"
                type="email"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="pl-10"
                required
                disabled={loading}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                id="password"
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="pl-10"
                required
                disabled={loading}
              />
            </div>
          </div>

          {error && (
            <Alert className="border-red-200 bg-red-50">
              <AlertCircle className="h-4 w-4 text-red-600" />
              <AlertDescription className="text-red-800">{error}</AlertDescription>
            </Alert>
          )}

          {success && (
            <Alert className="border-green-200 bg-green-50">
              <AlertCircle className="h-4 w-4 text-green-600" />
              <AlertDescription className="text-green-800">{success}</AlertDescription>
            </Alert>
          )}

          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –í—Ö–æ–¥...
              </>
            ) : (
              "–í–æ–π—Ç–∏"
            )}
          </Button>
        </form>

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {debugInfo && (
          <div className="mt-4 p-3 bg-gray-100 rounded text-xs">
            <div className="font-semibold mb-2">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</div>
            <div>–®–∞–≥: {debugInfo.step}</div>
            {debugInfo.profile && <div>–†–æ–ª—å: {debugInfo.profile.role}</div>}
            {debugInfo.error && <div className="text-red-600">–û—à–∏–±–∫–∞: {JSON.stringify(debugInfo.error, null, 2)}</div>}
          </div>
        )}

        <div className="mt-4 p-2 bg-gray-100 rounded text-xs">
          <div>Email: {email}</div>
          <div>Loading: {loading ? "–î–∞" : "–ù–µ—Ç"}</div>
          <div>Error: {error || "–ù–µ—Ç"}</div>
        </div>
      </CardContent>
    </Card>
  )
}
