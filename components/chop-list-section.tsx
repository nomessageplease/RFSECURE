"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { ArrowUpDown, ArrowUp, ArrowDown, Grid3X3, List, MapPin, Calendar, CheckCircle, RotateCcw } from "lucide-react"
import ChopListCards from "@/components/chop-list-cards"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface ChopListSectionProps {
  role?: string
}

export default function ChopListSection({ role = "–ì–æ—Å—Ç—å" }: ChopListSectionProps) {
  const [filters, setFilters] = useState({
    city: "all",
    foundedBefore: "all",
    hasRepresentative: "all",
  })

  const [sort, setSort] = useState({
    field: "rating",
    direction: "desc" as "asc" | "desc",
  })

  const [view, setView] = useState<"grid" | "list">("list")

  // –§–∏–ª—å—Ç—Ä—ã
  const cities = [
    { value: "all", label: "–í—Å–µ –≥–æ—Ä–æ–¥–∞" },
    { value: "moscow", label: "–ú–æ—Å–∫–≤–∞" },
    { value: "spb", label: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" },
    { value: "kazan", label: "–ö–∞–∑–∞–Ω—å" },
    { value: "ekaterinburg", label: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" },
    { value: "novosibirsk", label: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" },
  ]

  const foundedYears = [
    { value: "all", label: "–õ—é–±–æ–π –≥–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è" },
    { value: "2020", label: "–ù–µ –ø–æ–∑–¥–Ω–µ–µ 2020" },
    { value: "2015", label: "–ù–µ –ø–æ–∑–¥–Ω–µ–µ 2015" },
    { value: "2010", label: "–ù–µ –ø–æ–∑–¥–Ω–µ–µ 2010" },
    { value: "2005", label: "–ù–µ –ø–æ–∑–¥–Ω–µ–µ 2005" },
    { value: "2000", label: "–ù–µ –ø–æ–∑–¥–Ω–µ–µ 2000" },
  ]

  const representativeOptions = [
    { value: "all", label: "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" },
    { value: "yes", label: "–ï—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å" },
    { value: "no", label: "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è" },
  ]

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortOptions = [
    { field: "name", label: "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é" },
    { field: "rating", label: "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É" },
    { field: "vacancies", label: "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π" },
    { field: "city", label: "–ü–æ –≥–æ—Ä–æ–¥—É" },
    { field: "founded", label: "–ü–æ –≥–æ–¥—É –æ—Å–Ω–æ–≤–∞–Ω–∏—è" },
  ]

  // –í–∏–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const viewOptions = [
    { value: "grid" as const, label: "–ü–ª–∏—Ç–∫–∞", icon: Grid3X3 },
    { value: "list" as const, label: "–°–ø–∏—Å–æ–∫", icon: List },
  ]

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleCityChange = (city: string) => {
    setFilters({
      ...filters,
      city: city,
    })
  }

  const handleFoundedYearChange = (year: string) => {
    setFilters({
      ...filters,
      foundedBefore: year,
    })
  }

  const handleRepresentativeChange = (status: string) => {
    setFilters({
      ...filters,
      hasRepresentative: status,
    })
  }

  const clearFilters = () => {
    setFilters({
      city: "all",
      foundedBefore: "all",
      hasRepresentative: "all",
    })
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = (field: string) => {
    if (sort.field === field) {
      setSort({
        field,
        direction: sort.direction === "asc" ? "desc" : "asc",
      })
    } else {
      setSort({
        field,
        direction: "desc",
      })
    }
  }

  const getSortIcon = (field: string) => {
    if (sort.field !== field) {
      return <ArrowUpDown className="h-3 w-3 ml-1" />
    }
    return sort.direction === "asc" ? <ArrowUp className="h-3 w-3 ml-1" /> : <ArrowDown className="h-3 w-3 ml-1" />
  }

  return (
    <div className="bg-white rounded-lg">
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex gap-4 p-4">
        {/* –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
        <div className="w-80 flex-shrink-0">
          <div className="p-3 space-y-3 sticky top-4">
            <div className="flex items-center space-x-2 mb-4">
              <div className="w-6 h-6 bg-blue-600 rounded-md flex items-center justify-center">
                <span className="text-white text-xs">üîç</span>
              </div>
              <h3 className="font-semibold text-gray-900">–§–∏–ª—å—Ç—Ä—ã</h3>
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700 flex items-center">
                <MapPin className="h-4 w-4 text-blue-600 mr-2" />
                –ì–æ—Ä–æ–¥
              </label>
              <Select onValueChange={handleCityChange} value={filters.city}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" />
                </SelectTrigger>
                <SelectContent>
                  {cities.map((city) => (
                    <SelectItem key={city.value} value={city.value}>
                      {city.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –æ—Å–Ω–æ–≤–∞–Ω–∏—è */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700 flex items-center">
                <Calendar className="h-4 w-4 text-green-600 mr-2" />
                –ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
              </label>
              <Select onValueChange={handleFoundedYearChange} value={filters.foundedBefore}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥" />
                </SelectTrigger>
                <SelectContent>
                  {foundedYears.map((year) => (
                    <SelectItem key={year.value} value={year.value}>
                      {year.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700 flex items-center">
                <CheckCircle className="h-4 w-4 text-purple-600 mr-2" />
                –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
              </label>
              <Select onValueChange={handleRepresentativeChange} value={filters.hasRepresentative}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                </SelectTrigger>
                <SelectContent>
                  {representativeOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
            <Button variant="outline" onClick={clearFilters} className="w-full">
              <RotateCcw className="h-4 w-4 mr-2" />
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="flex-1 min-w-0">
          {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –≤–∏–¥–æ–º */}
          <div className="flex items-center justify-between mb-4 p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center space-x-4">
              <span className="text-sm font-medium text-gray-700">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
              <Select onValueChange={handleSortChange} value={sort.field}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {sortOptions.map((option) => (
                    <SelectItem key={option.field} value={option.field}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Button variant="outline" size="sm" onClick={() => handleSortChange(sort.field)}>
                {getSortIcon(sort.field)}
              </Button>
            </div>

            <div className="flex items-center space-x-2">
              <span className="text-sm font-medium text-gray-700">–í–∏–¥:</span>
              <div className="flex items-center bg-gray-100 rounded-lg p-1">
                {viewOptions.map((option) => {
                  const IconComponent = option.icon
                  return (
                    <Button
                      key={option.value}
                      variant={view === option.value ? "default" : "ghost"}
                      size="sm"
                      className="p-2"
                      onClick={() => setView(option.value)}
                      title={option.label}
                    >
                      <IconComponent className="h-4 w-4" />
                    </Button>
                  )
                })}
              </div>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
          <ChopListCards role={role} view={view} filters={filters} sort={sort} />
        </div>
      </div>
    </div>
  )
}
